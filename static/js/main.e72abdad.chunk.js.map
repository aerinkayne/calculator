{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","id","onClick","clickController","className","input","output","App","state","inputDisplay","currentNumber","formulaEntered","handleInput","bind","event","val","target","innerText","this","setState","indexOf","inputCopy","pop","join","result","evaluate","toString","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e72abdad.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Calculator = (props)=> {\r\n    return (\r\n        <div>\r\n            <p>calculator things</p>\r\n            \r\n            <div id=\"calcGrid\" onClick={props.clickController}>\r\n                <div id=\"input\" className=\"gridItem noHiLite\">{props.input || 0}</div>\r\n                <div id=\"display\" className=\"gridItem noHilite\">{props.output || 0}</div>\r\n                <div id=\"equals\" className=\"gridItem\">=</div>\r\n                \r\n                <div id=\"zero\" className=\"gridItem\">0</div>\r\n                <div id=\"one\" className=\"gridItem\">1</div>\r\n                <div id=\"two\" className=\"gridItem\">2</div>\r\n                <div id=\"three\" className=\"gridItem\">3</div>\r\n                <div id=\"four\" className=\"gridItem\">4</div>\r\n                <div id=\"five\" className=\"gridItem\">5</div>\r\n                <div id=\"six\" className=\"gridItem\">6</div>\r\n                <div id=\"seven\" className=\"gridItem\">7</div>\r\n                <div id=\"eight\" className=\"gridItem\">8</div>\r\n                <div id=\"nine\" className=\"gridItem\">9</div>\r\n\r\n                <div id=\"add\" className=\"gridItem\">+</div>\r\n                <div id=\"subtract\" className=\"gridItem\">-</div>\r\n                <div id=\"multiply\" className=\"gridItem\">*</div>\r\n                <div id=\"divide\" className=\"gridItem\">/</div>\r\n\r\n                <div id=\"clear\" className=\"gridItem\">clear</div>\r\n                <div id=\"decimal\" className=\"gridItem\">.</div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './components/Calculator';\nimport {evaluate} from 'mathjs';\n\nclass App extends React.Component {\n  constructor(){\n    super();\n    this.state = {\n      inputDisplay: '0',    //the input thus far\n      currentNumber: '0',   //the number currently being entered.  \n      formulaEntered: ''    //for storing formula after entering =\n    }\n    this.handleInput = this.handleInput.bind(this);\n  }\n\n  /*\n  componentDidUpdate(){\n    console.log(this.state);\n  }\n  */\n\n  handleInput(event){  \n    const val = event.target.innerText;   //switch cases.  only specific vals added to string for later evaluation\n\n    //mutually exclusive setState calls.  \n    switch(val){  \n      //reset all values with clear\n      case 'clear':\n        this.setState({\n          inputDisplay: '0',\n          currentNumber: '0',\n          formulaEntered: ''\n        })\n        break;\n        \n      //add decimal if currentNumber does not already contain a decimal\n      case '.':\n        if(this.state.currentNumber.indexOf('.') < 0){\n\n          this.setState({\n            currentNumber: this.state.currentNumber + val,\n            inputDisplay: this.state.inputDisplay + val\n          })\n          \n        }\n        break;\n\n      //add 0 only if input string is not 0.   \n      case '0':\n        if (this.state.inputDisplay !== '0') {\n          this.setState({\n            currentNumber: this.state.currentNumber + val,\n            inputDisplay: this.state.inputDisplay + val\n          })\n        }\n        break;\n\n      case '1':\n      case '2':\n      case '3':\n      case '4':\n      case '5':\n      case '6':\n      case '7':\n      case '8':\n      case '9':\n        //do not allow a leading 0.  todo: limit number length\n        if (this.state.inputDisplay !== '0'){\n          this.setState({\n            currentNumber: this.state.currentNumber + val,\n            inputDisplay: this.state.inputDisplay + val\n          })\n        } \n        else {\n          this.setState({\n            currentNumber: val,\n            inputDisplay: val\n          })\n        }\n        break;\n\n      case '+':\n      case '-':\n      case '*':\n      case '/':\n        //currentNumber is empty only if prior key was a number (initial state is 0).\n        if(this.state.currentNumber !== ''){\n          this.setState({\n            currentNumber: '',  //clear currentNumber entry\n            inputDisplay: this.state.inputDisplay + val\n          })\n        }\n        //replace last operator.\n        else{\n            let inputCopy = [...this.state.inputDisplay];\n            inputCopy.pop();    \n            inputCopy.join(''); \n            this.setState({ \n              inputDisplay: inputCopy + val\n            })\n          }\n        break;\n\n      case '=':\n        //set input to evaluated value and reset currentNumber to 0.\n        let formulaEntered = this.state.inputDisplay;\n        let result = evaluate(this.state.inputDisplay).toString();\n        this.setState({\n          currentNumber: '0',\n          formulaEntered,\n          inputDisplay: result\n        })\n        break;   \n        default: return;  \n    }\n    \n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          <Calculator input={this.state.formulaEntered} output={this.state.inputDisplay} clickController={this.handleInput} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}